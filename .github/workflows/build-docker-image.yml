name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: false
        default: 'master'
      destination:
        description: 'Where to save the Docker image: ecr or artifact'
        type: choice
        options:
          - ecr
          - artifact
        required: true
        default: 'ecr'

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      REPO_NAME: ${{ steps.extract-info.outputs.REPO_NAME }}
      VERSION: ${{ steps.extract-info.outputs.VERSION }}
      IMAGE_NAME: ${{ steps.extract-info.outputs.IMAGE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Extract repository name and version
        id: extract-info
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION=${GITHUB_REF_NAME}
          else
            VERSION=${{ github.event.inputs.branch || github.ref_name }}
          fi
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${REPO_NAME}:${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ steps.extract-info.outputs.IMAGE_NAME }}
          DOCKERFILE_PATH=./Dockerfile
          echo "Building image: $IMAGE_NAME using Dockerfile at: $DOCKERFILE_PATH"
          docker build -f $DOCKERFILE_PATH -t $IMAGE_NAME .

  save-as-artifact:
    needs: build
    if: ${{ github.event.inputs.destination == 'artifact' }}
    uses: ./.github/workflows/push-image-to-artifact.yml
    with:
      artifact_name: ${{ needs.build.outputs.REPO_NAME }}_${{ needs.build.outputs.VERSION }}

  push-to-ecr:
    needs: build
    if: ${{ github.event.inputs.destination == 'ecr' }}
    uses: ./.github/workflows/push-image-to-ecr.yml
    with:
      image_name:  ${{ needs.build.outputs.IMAGE_NAME }}
    secrets:
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
